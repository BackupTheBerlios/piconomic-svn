/* ==========================================================================

   Copyright (c) 2009 Pieter Conradie <pieterconradie@users.berlios.de>
   All rights reserved.

   Redistribution and use in source and binary forms, with or without
   modification, are permitted provided that the following conditions are met:

   * Redistributions of source code must retain the above copyright
     notice, this list of conditions and the following disclaimer.

   * Redistributions in binary form must reproduce the above copyright
     notice, this list of conditions and the following disclaimer in
     the documentation and/or other materials provided with the
     distribution.

   * Neither the name of the copyright holders nor the names of
     contributors may be used to endorse or promote products derived
     from this software without specific prior written permission.

   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
   LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   POSSIBILITY OF SUCH DAMAGE.

========================================================================== */

/**
 *  @ingroup ARM_AT91_TUTORIALS
 *  @defgroup ARM_AT91_TUT03_C_BOARD_INIT /03_C_board_init
 *  
 *  Demonstrates assembler start up code that calls a low level C hardware initialisation function.
 * 
 *  The DS1 LED output pin on PA0 is enabled. This tutorial illustrates the
 *  initial assembler start sequence during C run time initialisation. The
 *  concept of sections is introduced, which have to be organised with a linker
 *  script. Please note that the linker script is an example for this tutorial
 *  only and does not provide for all the sections of a proper C program. The
 *  linker script also assumes that the C function is compiled in ARM mode, not
 *  Thumb mode.
 *  
 *  The assembler start up code provides stack space for the low level C function,
 *  but does not clear C variables in the BSS section, or initialise C variables
 *  in the DATA section. Care must be taken in how this C function is coded,
 *  otherwise it may not function as expected.
 *  
 *  The extended assembly listing file should always be examined to verify that
 *  the code has been generated correctly.
 *  
 *  @par File: C_board_init.lss
 *  @include C_board_init.lss
 *  
 */
