# Hey Emacs, this is a -*- makefile -*-
# ---------------------------------------------------------------------------
# Based on WinARM and WinAVR Makefile Template.
#
# WinARM template makefile by Martin Thomas, Kaiserslautern, Germany 
#
# WinAVR Makefile Template written by Eric B. Weddington, Jörg Wunsch, et al.
#
# ---------------------------------------------------------------------------
# On command line:
#
# make             = Perform a debug build
# make CFG=debug   = Perform a debug build
# make CFG=release = Perform a release build
# make clean       = Delete created project files
# make gdb         = Create a GDB init file, launch OpenOCD and GDB/Insight
# make telnet      = Start telnet session with OpenOCD
# make openocd     = Launch OpenOCD
#
# ---------------------------------------------------------------------------
# Creation Date:  2008/06/30
# Revision Info:  $Id: Makefile 1 2008-12-02 07:02:22Z Pieter.Conradie $
# ---------------------------------------------------------------------------

# Chip & board used for compilation
CHIP  = at91sam7s256
BOARD = at91sam7s-ek


# MCU name
MCU = arm7tdmi


# Target file name (without extension)
TARGET = PROJECT


# This option controls whether non-ARM specific C code is compiled in Thumb mode
USE_THUMB_MODE = YES
#USE_THUMB_MODE = NO


# Directories where source files can be found
AT91LIB = ../../../../../../atmel_at91lib
PICLIB  = ../../../../../../piconomic_fwlib
PERIPH  = $(AT91LIB)/peripherals
BOARDS  = $(AT91LIB)/boards

VPATH += $(PERIPH)/aic $(PERIPH)/pit
VPATH += $(BOARDS)/$(BOARD) $(BOARDS)/$(BOARD)/$(CHIP)
#VPATH += $(PICLIB)/arch/arm/AT91/boards/$(BOARD)

VPATH += $(PICLIB)/general
VPATH += $(PICLIB)/arch/arm
VPATH += $(PICLIB)/arch/arm/AT91
#VPATH += $(PICLIB)/arch/arm/AT91/boards/$(BOARD)


# List C source files here. (C dependencies are automatically generated)
SRC  = main.c

# Piconomic LIB
SRC += pitd.c tmr.c

# Atmel AT91LIB
SRC += aic.c pit.c

# Board support package
SRC += board_lowlevel.c board_memories.c

# List C source files here which must be compiled in ARM-Mode.
SRCARM  = arm.c


# List Assembler source files here.
#     Make them always end in a capital .S.  Files ending in a lowercase .s
#     will not be considered source files but generated files (assembler
#     output from the compiler), and will be deleted upon "make clean"!
#     Even though the DOS/Win* filesystem matches both .s and .S the same,
#     it will preserve the spelling of the filenames, and gcc itself does
#     care about how the name is spelled on its command-line.
ASRC =


# List Assembler source files here which must be assembled in ARM-Mode.
ASRCARM = arm_crt0.S arm_irq.S


# Specify a DEBUG or RELEASE build
# "make" or "make CFG=debug" to build a debug build
# "make CFG=release" to build a release build
ifeq ($(CFG),)
CFG=debug
endif
ifneq ($(CFG),release)
ifneq ($(CFG),debug)
	@echo "Error: Invalid build CFG="$(CFG)" specified. Use 'debug' or 'release'"
	@exit 1
endif
endif


# Thumb and thumb interworking command line options
ifeq ($(USE_THUMB_MODE),YES)
THUMB    = -mthumb
THUMB_IW = -mthumb-interwork
else 
THUMB    = 
THUMB_IW = 
endif


# Output files directory
#     To put output files in current directory, use a dot (.), do NOT make
#     this an empty or blank macro!
ifeq ($(CFG),debug)
OUTDIR = DEBUG
else
OUTDIR = RELEASE
endif


# List any extra directories to look for include files here.
#     Each directory must be seperated by a space.
#     Use forward slashes for directory separators.
#     For a directory that has spaces, enclose it in quotes.
EXTRAINCDIRS  = $(AT91LIB)
EXTRAINCDIRS += $(AT91LIB)/peripherals
EXTRAINCDIRS += $(AT91LIB)/boards/$(BOARD)
EXTRAINCDIRS += $(AT91LIB)/boards/$(BOARD)/$(CHIP)

EXTRAINCDIRS += $(PICLIB)
EXTRAINCDIRS += $(PICLIB)/general
EXTRAINCDIRS += $(PICLIB)/arch/arm
EXTRAINCDIRS += $(PICLIB)/arch/arm/AT91
#EXTRAINCDIRS += $(PICLIB)/arch/arm/AT91/boards/$(BOARD)

# Compiler flag to set the C Standard level.
#     c89   = "ANSI" C
#     gnu89 = c89 plus GCC extensions
#     c99   = ISO C99 standard (not yet fully implemented)
#     gnu99 = c99 plus GCC extensions
CSTANDARD = -std=gnu99


# Place -D or -U options here for C sources
CDEFS  = -D$(CHIP) -Dtrace_LEVEL=3 -DNOTRACE

ifeq ($(CFG),debug)
CDEFS += -DDEBUG
endif


# Place -D or -U options here for ASM sources
ADEFS  = -D$(CHIP) -D__ASSEMBLY__

ifeq ($(CFG),debug)
ADEFS += -DDEBUG
endif


#---------------- Compiler Options C ----------------
#  -g*:          generate debugging information
#  -O*:          optimization level; can be [0, 1, 2, 3, s]
#  -f...:        tuning, see GCC manual and avr-libc documentation
#  -Wall...:     warning level
#  -Wa,...:      tell GCC to pass this to the assembler.
#    -adhlns...: create assembler listing
CFLAGS  = $(CDEFS)
#CFLAGS += -funsigned-char
#CFLAGS += -funsigned-bitfields
#CFLAGS += -fpack-struct
#CFLAGS += -fshort-enums
CFLAGS += -mlong-calls
CFLAGS += -ffunction-sections
CFLAGS += -Wall 
#CFLAGS += -Wcast-align -Wimplicit 
#CFLAGS += -Wpointer-arith -Wswitch
#CFLAGS += -Wredundant-decls -Wreturn-type -Wshadow -Wunused
#CFLAGS += -Wstrict-prototypes
#CFLAGS += -mshort-calls
#CFLAGS += -fno-unit-at-a-time
#CFLAGS += -Wundef
#CFLAGS += -Wunreachable-code
#CFLAGS += -Wsign-compare
CFLAGS += -mfpu=fpa
CFLAGS += -fgnu89-inline
CFLAGS += -Wa,-adhlns=$(OUTDIR)/$*.lst
CFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))
CFLAGS += $(CSTANDARD)

ifeq ($(CFG),debug)
CFLAGS += -g
CFLAGS += -O0
else
CFLAGS += -Os
endif


#---------------- Assembler Options ----------------
#  -Wa,...:   tell GCC to pass this to the assembler.
#  -adhlns:   create listing
#  -listing-cont-lines: Sets the maximum number of continuation lines of hex 
#       dump that will be displayed for a given single line of source input.
ASFLAGS  = $(ADEFS)
ASFLAGS += $(patsubst %,-I%,$(EXTRAINCDIRS))
ASFLAGS += -Wa,-adhlns=$(OUTDIR)/$*.lst,--gdwarf-2,--listing-cont-lines=100,-mfpu=fpa


#---------------- Library Options ----------------
# List any extra directories to look for libraries here.
#     Each directory must be seperated by a space.
#     Use forward slashes for directory separators.
#     For a directory that has spaces, enclose it in quotes.
EXTRALIBDIRS = 


#---------------- Linker Options ----------------
#  -Wl,...:       tell GCC to pass this to linker.
#  -Map:          create map file
#  --cref:        add cross reference to  map file
LDFLAGS  = -nostartfiles 
LDFLAGS += -nodefaultlibs
LDFLAGS += -Wl,-Map=$(OUTDIR)/$(TARGET).map,--cref,--gc-sections
LDFLAGS += $(patsubst %,-L%,$(EXTRALIBDIRS))
#LDFLAGS += -lc -lm -lgcc
LDFLAGS += -lnosys -lm -lgcc
LDFLAGS += -T $(PICLIB)/arch/arm/AT91/boards/linker_scripts/$(CHIP)-rom.lds


#---------------- Debugging Options ----------------

# Set the DEBUG_UI to either gdb or insight.
# DEBUG_UI = gdb
DEBUG_UI = insight

# Set the debugging back-end
DEBUG_BACKEND = openocd

# GDB Init Filename.
GDBINIT_FILE = init.gdb

# Debugging port used to communicate between GDB / OpenOCD
DEBUG_PORT = 3333

# Debugging host used to communicate between GDB / OpenOCD, normally
# just set to localhost unless doing some sort of crazy debugging when 
# OpenOCD is running on a different computer.
DEBUG_HOST = localhost

# This option controls whether OpenOCD is launched via GDB/Insight and use
# pipe communication (stdin, stdout), or if OpenOCD is launched as a separate
# GDB Server
#DEBUG_PIPE = YES
DEBUG_PIPE = NO

# Specify the interface that OpenOCD should use
DEBUG_INTERFACE = interface/olimex-jtag-tiny-a.cfg

# Specify the board or target
DEBUG_TARGET = board/atmel_at91sam7s-ek.cfg

#============================================================================


# Define programs and commands.
#CPREFIX   = arm-none-eabi
CPREFIX   = arm-elf
SHELL     = sh
CC        = $(CPREFIX)-gcc
OBJCOPY   = $(CPREFIX)-objcopy
OBJDUMP   = $(CPREFIX)-objdump
SIZE      = $(CPREFIX)-size
AR        = $(CPREFIX)-ar rcs
NM        = $(CPREFIX)-nm
REMOVE    = rm -f
REMOVEDIR = rm -rf
COPY      = cp
WINSHELL  = cmd


# Define Messages
# English
MSG_ERRORS_NONE      = Errors: none
MSG_BEGIN            = -------- begin [build : $(CFG)] --------
MSG_END              = -------- end   [build : $(CFG)] --------
MSG_SIZE_BEFORE      = Size before: 
MSG_SIZE_AFTER       = Size after:
MSG_PROGRAM          = Programming device:
MSG_FLASH            = Creating load file for Flash:
MSG_EXTENDED_LISTING = Creating Extended Listing:
MSG_SYMBOL_TABLE     = Creating Symbol Table:
MSG_LINKING          = Linking:
MSG_COMPILING_ARM    = "Compiling (ARM):"
MSG_ASSEMBLING_ARM   = "Assembling (ARM):"
ifeq ($(USE_THUMB_MODE),YES)
MSG_COMPILING        = "Compiling (THUMB):"
MSG_ASSEMBLING       = "Assembling (THUMB):"
else
MSG_COMPILING        = $(MSG_COMPILING_ARM)
MSG_ASSEMBLING       = $(MSG_ASSEMBLING_ARM)
endif
MSG_CLEANING         = Cleaning project:
MSG_CREATING_LIBRARY = Creating library:
MSG_DEBUG_GDB_SERVER = Launching GDB Server:
MSG_DEBUG_GDB        = Launching $(CPREFIX)-$(DEBUG_UI):
MSG_TELNET           = Starting TELNET session with OpenOCD:


# Define all object files.
OBJSRC     = $(SRC:%.c=$(OUTDIR)/%.o)
OBJSRCARM  = $(SRCARM:%.c=$(OUTDIR)/%.o)
OBJASRC    = $(ASRC:%.S=$(OUTDIR)/%.o)
OBJASRCARM = $(ASRCARM:%.S=$(OUTDIR)/%.o)
OBJ        = $(OBJASRCARM) $(OBJASRC) $(OBJSRCARM) $(OBJSRC)


# Define all listing files.
LST  = $(SRC:%.c=$(OUTDIR)/%.lst) $(SRCARM:%.c=$(OUTDIR)/%.lst) 
LST += $(ASRC:%.S=$(OUTDIR)/%.lst) $(ASRCARM:%.S=$(OUTDIR)/%.lst) 


# Compiler flags to generate dependency files.
GENDEPFLAGS = -MMD -MP -MF $(OUTDIR)/$(@F).d


# Combine all necessary flags and optional flags.
# Add target processor to flags.
ALL_CFLAGS  = -mcpu=$(MCU) $(THUMB_IW) -I. $(CFLAGS) $(GENDEPFLAGS)
ALL_ASFLAGS = -mcpu=$(MCU) $(THUMB_IW) -I. -x assembler-with-cpp $(ASFLAGS)


# Default target.
all: begin gccversion sizebefore build sizeafter end


# Change the build target to build a HEX file or a library.
build: elf hex bin lss sym
#build: lib


elf: $(OUTDIR)/$(TARGET).elf
hex: $(OUTDIR)/$(TARGET).hex
bin: $(OUTDIR)/$(TARGET).bin
lss: $(OUTDIR)/$(TARGET).lss
sym: $(OUTDIR)/$(TARGET).sym
lib: lib$(TARGET).a


# Eye candy.
begin:
	@echo
	@echo $(MSG_BEGIN)
	@echo

end:
	@echo
	@echo $(MSG_END)
	@echo


# Display size of file.
HEXSIZE = $(SIZE) --target=$(FORMAT) $(OUTDIR)/$(TARGET).hex
ELFSIZE = $(SIZE) -A -x $(OUTDIR)/$(TARGET).elf

sizebefore:
	@if test -f $(OUTDIR)/$(TARGET).elf; then echo; echo $(MSG_SIZE_BEFORE); $(ELFSIZE); \
	2>/dev/null; echo; fi

sizeafter:
	@if test -f $(OUTDIR)/$(TARGET).elf; then echo; echo $(MSG_SIZE_AFTER); $(ELFSIZE); \
	2>/dev/null; echo; fi



# Display compiler version information.
gccversion : 
	@$(CC) --version


# Generate gdb config/init file
gdb-config: 
	@$(REMOVE) $(GDBINIT_FILE)
	@echo file $(OUTDIR)/$(TARGET).elf >> $(GDBINIT_FILE)
ifeq ($(DEBUG_PIPE),YES)
	@echo target remote \| openocd -f $(DEBUG_INTERFACE) -f $(DEBUG_TARGET) --pipe  >> $(GDBINIT_FILE)
else 
	@echo target remote $(DEBUG_HOST):$(DEBUG_PORT)  >> $(GDBINIT_FILE)
endif
	@echo monitor reset init >> $(GDBINIT_FILE)
	@echo load  >> $(GDBINIT_FILE)
	@echo compare-sections  >> $(GDBINIT_FILE)
	@echo thbreak main >> $(GDBINIT_FILE)
	@echo continue >> $(GDBINIT_FILE)

# Start OpenOCD
openocd:
	@echo
	@echo $(MSG_DEBUG_GDB_SERVER)
	@$(WINSHELL) /c start openocd -f $(DEBUG_INTERFACE) -f $(DEBUG_TARGET)
	
# Start gdb debugging
gdb: gdb-config elf
ifeq ($(DEBUG_PIPE),YES)
	@echo
	@echo $(MSG_DEBUG_GDB)
	@$(WINSHELL) /c start $(CPREFIX)-$(DEBUG_UI) --command=$(GDBINIT_FILE)
else
	@echo
	@echo $(MSG_DEBUG_GDB_SERVER)
	@$(WINSHELL) /c start openocd -f $(DEBUG_INTERFACE) -f $(DEBUG_TARGET)
	@echo
	@echo $(MSG_DEBUG_GDB)
	@$(WINSHELL) /c start $(CPREFIX)-$(DEBUG_UI) --command=$(GDBINIT_FILE)
endif

# Start telnet session with OpenOCD
telnet:
	@echo
	@echo $(MSG_TELNET)
	@$(WINSHELL) /c start putty -telnet -P 4444 $(DEBUG_HOST)


# Create final output file (.hex) from ELF output file.
%.hex: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O ihex $< $@


# Create final output file (.bin) from ELF output file.
%.bin: %.elf
	@echo
	@echo $(MSG_FLASH) $@
	$(OBJCOPY) -O binary $< $@


# Create extended listing file from ELF output file.
%.lss: %.elf
	@echo
	@echo $(MSG_EXTENDED_LISTING) $@
	$(OBJDUMP) -h -S $< > $@


# Create a symbol table from ELF output file.
%.sym: %.elf
	@echo
	@echo $(MSG_SYMBOL_TABLE) $@
	$(NM) -n $< > $@


# Create library from object files.
.SECONDARY : $(TARGET).a
.PRECIOUS : $(OBJ)
%.a: $(OBJ)
	@echo
	@echo $(MSG_CREATING_LIBRARY) $@
	$(AR) $@ $(OBJ)


# Link: create ELF output file from object files.
.SECONDARY : $(TARGET).elf
.PRECIOUS : $(OBJ)
%.elf: $(OBJ)
	@echo
	@echo $(MSG_LINKING) $@
	$(CC) $(THUMB) $(ALL_CFLAGS) $^ --output $@ $(LDFLAGS)


# Compile: create object files from C source files (Thumb)
$(OBJSRC) : $(OUTDIR)/%.o : %.c
	@echo
	@echo $(MSG_COMPILING) $<
	$(CC) -c $(THUMB) $(ALL_CFLAGS) $< -o $@ 


# Compile: create object files from C source files (Arm)
$(OBJSRCARM) : $(OUTDIR)/%.o : %.c
	@echo
	@echo $(MSG_COMPILING_ARM) $<
	$(CC) -c -marm $(ALL_CFLAGS) $< -o $@ 


# Assemble: create object files from assembler source files (Thumb)
$(OBJASRC) : $(OUTDIR)/%.o : %.S
	@echo
	@echo $(MSG_ASSEMBLING) $<
	$(CC) -c -mthumb $(ALL_ASFLAGS) $< -o $@


# Assemble: create object files from assembler source files (Arm)
$(OBJASRCARM) : $(OUTDIR)/%.o : %.S
	@echo
	@echo $(MSG_ASSEMBLING_ARM) $<
	$(CC) -c -marm $(ALL_ASFLAGS) $< -o $@


# Target: clean project.
clean: begin clean_list end

clean_list :
	@echo
	@echo $(MSG_CLEANING)
	$(REMOVE) $(OUTDIR)/$(TARGET).hex
	$(REMOVE) $(OUTDIR)/$(TARGET).bin
	$(REMOVE) $(OUTDIR)/$(TARGET).elf
	$(REMOVE) $(OUTDIR)/$(TARGET).map
	$(REMOVE) $(OUTDIR)/$(TARGET).sym
	$(REMOVE) $(OUTDIR)/$(TARGET).lss
	$(REMOVE) $(SRC:%.c=$(OUTDIR)/%.o)
	$(REMOVE) $(SRCARM:%.c=$(OUTDIR)/%.o)
	$(REMOVE) $(ASRC:%.S=$(OUTDIR)/%.o)
	$(REMOVE) $(ASRCARM:%.S=$(OUTDIR)/%.o)
	$(REMOVE) $(SRC:%.c=$(OUTDIR)/%.lst)
	$(REMOVE) $(SRCARM:%.c=$(OUTDIR)/%.lst)
	$(REMOVE) $(ASRC:%.S=$(OUTDIR)/%.lst)
	$(REMOVE) $(ASRCARM:%.S=$(OUTDIR)/%.lst)
	$(REMOVE) $(SRC:%.c=$(OUTDIR)/%.o.d)
	$(REMOVE) $(SRCARM:%.c=$(OUTDIR)/%.o.d)

# Create directories
$(shell mkdir $(OUTDIR) 2>/dev/null)


# Include the dependency files.
-include $(shell mkdir $(OUTDIR) 2>/dev/null) $(wildcard $(OUTDIR)/*.d)


# Listing of phony targets.
.PHONY : all begin finish end sizebefore sizeafter gccversion \
build elf hex lss sym \
clean clean_list program telnet gdb openocd

# ---------------------------------------------------------------------------
# LOG
#
# 2008/06/30 : Pieter.Conradie
# - Created
